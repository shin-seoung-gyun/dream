import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class RCPFix {
	private int userNum;// 게임 이용자 수
	private List<Integer> gameUser = new ArrayList<>();// 게임할 user 인덱스 리스트, 게임에서 지는 유저 인덱스는 리스트에서 삭제
	private int[] userValue; // 유저들이 낸 가위 바위 보 값.
	private int[] winCnt;// 유저들이 이긴값
	private int gameCnt;// 게임 횟수
	private boolean gameMode;// true일경우 이길때 까지 반복,false일 경우 user가 진경우 컴퓨터에서도 최종 승자 나올때 까지 플레이

	RCPFix(int userNum, boolean gameMode) {// 생성자 함수
		this.userNum = userNum;
		this.gameMode = gameMode;
		userValue = new int[userNum];// 이용자 수에 맞춰 배열크기 결정 유저의 입력값 저장소
		winCnt = new int[userNum];// 이용자 수에 맞춰 승리 인덱스 크기 결정.
		for (int i = 0; i < userNum; i++) {// 이용자의 인덱스를 리스트에 넣기위해 지정.
			gameUser.add(i);// 이용자 수에 맞춰서 user의 인덱스 리스트 만들기.
		}
		gameCnt = 1; // 처음 입력할때 즉 첫판에 위의 과정을 수행한다.
	}

	void gameOn() {

	}

	private void getWinCnt() {// 모든 이용자의 winCnt 배열의 값 결정하는 메서드.
		// winCnt 초기화
		for (int i = 0; i < winCnt.length; i++) {
			winCnt[i] = 0;
		}

		for (int i = 0; i < gameUser.size(); i++) {
			for (int j = i + 1; j < gameUser.size(); j++) {
				int userIdx1 = gameUser.get(i);
				int userIdx2 = gameUser.get(j);
				int result = doRcp(userValue[userIdx1], userValue[userIdx1]);
				if (result == 1) {
					winCnt[userIdx1]++;
				} else if (result == 2) {
					winCnt[userIdx2]++;
				}
			}
		}
	}

	private int doRcp(int userNum1, int userNum2) {// 1대1 대결
		// user2명이서 대결, user1이 이기면 1리턴, user2가 이기면 2리턴 비기면 0리턴
		if (userNum1 == userNum2) {
			return 0;
		} else if (userNum1 - userNum2 == -2 || userNum1 - userNum2 == 1) {
			return 1;
		} else {
			return 2;
		}
	}

	private String getUserSel(int num) {//이용자의 번호를 받아 문자열로 변경
		String result = switch (num) {
		case 0 -> "가위";
		case 1 -> "바위";
		case 2 -> "보";
		default ->"";
		};
		return result;
		
	}
	
	private int getUserNum(String userSel) {//이용자의 문자를 받아 정수열로 변경
		int result = switch (userSel) {
		case "가위" -> 0;
		case "바위" -> 1;
		case "보" -> 2;
		default ->-1;
		};
		return result;
		
	}
	
	private boolean allTrue() {//winCnt가 0이면 해당 인덱스는 false;
		boolean result = true;
		for(var idx : gameUser) {
			if(winCnt[idx]==0) {
				result=false;
				break;
			}
		}
		return result;
	}
	private boolean allZero() {//winCnt배열 상에 해당 유저의 값이 0보다 크면 true;
		boolean result = true;
		for(var idx : gameUser) {
			if(winCnt[idx]>0) {
				result = false;
				break;
			}
		}
		return result;
	}
	
	private void printUserValue() {//유저가 낸 값 출력
		String tempStr;
		System.out.println("\n<플레이어들 입력 값>");
		for(var userIdx : gameUser) {
			System.out.printf("User[%d] : %s\n", userIdx, getUserSel(userValue[userIdx]));
		}
	}
	private void serUserValue() {// 사용자를 포함한 user의 입력값 메서드
		Scanner in = new Scanner(System.in);
		Random rand = new Random();
		System.out.println("-----------------------------------");
		System.out.printf("%d번째 가위 바위 보 게임을 진행합니다\n",gameCnt++);//게임횟수 다음판 게임 카운트를 하나 올리고 현재 게임 카운트를 출력.
		for(int i = 0 ; i < gameUser.size(); i++) {
			int userIdx = gameUser.get(i);//게임 유저 인덱스 모음에서 i인덱스의 유저 인덱스 가져옴
			if(userIdx == 0) {
				System.out.println("User[0]은 가위 바위 보 값중 하나를 입력하세요.");
				String userSel = in.nextLine();
				int userNum = getUserNum(userSel);//userSel로 받은 문자열을 숫자열로 변환
				if(userNum == -1) {
					System.out.println("잘못입력하셨습니다 다시입력해주세요.");
					i--;
					continue;
				}
				
				userValue[userIdx]=userNum;
			}else {
				userValue[userIdx]= rand.nextInt(3);
			}
		}
	}
	private boolean gameResult() {//본게임 메서드
		//재경기 조건 1 : 무승부일때 winCnt값이 모두 0이거나 모두 1이상일때.
		boolean isDraw = (allTrue()==true||allZero()==true)? true:false;
		System.out.println();
		
	}

}
