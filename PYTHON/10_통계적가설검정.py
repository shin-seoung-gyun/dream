#1. 통계적 가설검정
#2. 기본적 가설검정
#3. 2표본 문제(두집단)에 관한 가설 검정

#통계적 가설 검정 : 모집단의 모수에 관한 가설을 세우고
#표본의 정보를 이용해서 그가설을 검증하는 기법

#가설 검정 단계
#1) 가설 수립 -> 2)유의 수준결정(대표적으로 0.05)-> 3)검정통계량 구하기 ->4) 결과 판정
#
# ex)A학생이 어느 감자튀김 가게의 모평균이 130g인지 확인하기 위해서
# 14개를 얻어서 표본평균이 128.451g이 나옴
# 우연인지 아닌지 확인
#  
#1.통계적 가설검정

#(1) 통계적 가설검정의 기본
#A학생이 감자튀김에 관해 확인하고 싶은것은 모평균이 130g보다 작은지 여부
#가정 : 전체 감자튀김 모집단이 정규분포를 따르고, 모분산 9

#모평균을 130g이라고 가정하고 실험진행
#이 가정을 기초로 14개의 표본은 X1,X2,....,X14~N(130,9)를 따른다.
#표본평균 Xbar는 N(130, 9/14)를 따른다.


#표본평균 Xbar가 P(Xbar<=x)=0.05가 되는 구하기
import numpy as np
import pandas as pd
from scipy import stats
df = pd.read_csv('./data/ch11_potato.csv')
sample = np.array(df['무게'])
sample.shape
s_mean = np.mean(sample)#표본평균
s_mean #128.45

rv = stats.norm(130, np.sqrt(9/14))#표본평균의분포
rv.isf(0.95) #128.68
#표본평균이 128.68 이하의 무게가 되는것은 5%확률로 발생

#대립가설-H1 : 주장하고 싶은 가설
#ex) 차이가 있다. 효과가 있다
#귀무가설-H0 : 대립가설과 반대
#ex)차이가 없다. 효과가 없다.

#결곤 귀무가설 채택, 귀무가설 기각
#귀무가설 기각 -> 귀무가설이 옳지않다 -> 대립가설 채택
#가설 검정을 할때는 귀무가설의 가정을 바탕으로 검사를 했을때
#드문값을 얻으면, 우연이 아니라 어떤의미가 있다 라고 판단. (유의하다.)

#ex) 에서 대립가설, 귀무가설
#대립가설 : 모평균이 130g 보다 작다.
#귀무가설 : 모평균이 130g 이다.

#128.45g(표본평균)은 모평균 130g을 가정했을때 유의미 하므로
#귀무가설 기각, 만약 표본평균이 129g 이였으면 귀무가설 채택

#유의수준 : 기각역에 들어가는 확률 5%
#임계값 : 경계선의 값 128.681g
#기각역 : 귀무가설이 기각되는 구간 X <= 128.681g(임계값)
#채택역 : 귀무가설이 채택되는 구간 X >= 128.681g
#검정통계량 : 검정에 사용되는 통계량 128.45g(표본평균)
#p값 : 검정통계량보다 왼쪽에 있는 영역의 확률

# 귀무가설 기각될때
# 검정통계량 < 임계값
# p<유의수준(p값이 유의수준보다 작으면 귀무가설 기각)
#

#감자튀김의 표본평균을표준화 시켜서 설명
#Z=(Xbar-130/sqrt(9/14))
#P(Z<=x)=0.05

#검정통계량
z=(s_mean-130)/np.sqrt(9/14)
#임계값 
rv= stats.norm()
rv.isf(0.95)
#검정통계량 임계값 비교
z, rv.isf(0.95) #검정통계량 < 임계값 (귀무가설 기각)

#p값 - 누적분포함수를 사용해 구한다
rv.cdf(z)#p값(0.027)<유의수준(0.05)(귀무가설 기각)

#p값을 기준으로 하는 가설검정 순서도
#1) 가설을 세운다
#2) 유의 수준을 결정한다.
#3) 검정통계량을 계산
#4) p값을 계산
#5-1) p값이 유의수준보다 작으면 귀무가설 기각
#5-2) p값이 유의수준보다 크면 귀무가설 채택

# (2) 단측 검정과 양측 검정

#단측검청
#A학생이 감자튀김이 130g보다 작은지 여부에만 흥미가 있어
#대립가설 ' 모평균은 130g보다 작다 ' 라는 가설로 검정수행

#양측검정
#'모평균은 130g이 아니다.' 라는 대립가설로 가설검정을할수도 있다.
#이 경우 모평균이 130g보다 작은 경우 뿐 아니라 130g보다 큰 경우도 고려

#차이점
#양측검정과 단측검정은 기각역이 다르다.
#동일 유의수준의 검정도 단측검정쪽의 기각역이 넓다.
#단측검정은 양측점정보다 귀무가설을 기각하기 쉬움

#양측검정 수행

z= (s_mean-130)/np.sqrt(9/14)#검정통계량
z

#임계값 
rv = stats.norm()
rv.interval(0.95)

#검정통계량 값이 임계값 사이에 있다.
#귀무가설 채택

#양측검정의 p값을 구할때 상단과 하단의 면적 모두 고려
rv.cdf(z)*2
#p값이 0.053>0.05 유의 수준 보다 크므로 귀무가설 채택

# 귀무가설이 채택되었다고, 모평균이 130g 이다 라는 결론이 되는것은 아님.


#(3) 가설검정의 두가지 오류
#제 1종 오류 : 귀무가설이 옳을때, 귀무가설을 기각하는 오류
#제 2종 오류 : 대립가설이옳을때 , 귀무가설을 채택하는 오류

#제 1종 오류 - 감자튀김에서 실제로 '평균이 130g'인데
#'평균이 130g'보다 작다 라는 결론을 내리는 경우
#본래 검출하지 말아야 할것을 검출한 것이므로 오탐이라고 함.

#제 1종 오류 발생 비율 시뮬레이션
#모집단의 확률 분포 n(130, 3^2)
rv = stats.norm(130,3)

#모집단에서 14개의 표본 추출 10000qjs tngod
n_samples = 10000
cnt = 0
for _ in range(n_samples):
    sample = np.round(rv.rvs(14),2)#샘플 14개 추출
    s_mean = np.mean(sample)
    z=(s_mean-130)/np.sqrt(9/14)
    p = stats.norm().cdf(z)
    if p <= 0.05:
        cnt +=1
cnt / n_samples
##제 1 종 오류를 범할 비율 대략 5프로 (오탐)
#위험률 : 제1종 오류를 범하는 확률
#위험률은 유의 수준이 일치함으로 분석가가 제어할수 있는 확률임
#제1종 오류가 발생하는 확률을 1%로 하고싶으면 분석하는 유의 수준을 1%로 진행

# 제 2종오류 - 감자튀김 ' 모평균이 130g 보다 작다' 인데도
#'모평균은 130g 보다 작다'라는 결론을 얻지 못할 경우
#본래 검출해야 하는 것을 검출하지 못했으므로 미탐이라고 함

#시뮬레이션 -- 감자튀김평균이 128g 이라고 가정
#모집단 확률 분포
rv = stats.norm(128,3)
n_samples = 10000
cnt = 0
for _ in range(n_samples):
    sample = np.round(rv.rvs(14),2)#샘플 14개 추출
    s_mean = np.mean(sample)
    z=(s_mean-130)/np.sqrt(9/14)
    p = stats.norm().cdf(z)
    if p >= 0.05:
        cnt +=1
cnt / n_samples#0.195
#제 2종 오류를 범할 비율은 대략 20%. 미탐발생
#Betha : 제2종오류를 범할 확률
#검정력 1-Betha

#대립가설이 동일하게 모평균이 130g보다 작다 상황인데


#-----------------------------------------------------------------------------------------------------------------------------------
#2.기본적인 가설검정
#양측검정을 기본으로 예시를 듬. 단측검정도 기각역과 채택역이 다를뿐 동일.
#(1)정규분포의 모평균에 대한 검정 : 모분산을 알고 있는 경우
#귀무가설 : 모평균 = u0
#대립가설 : 모평균 = u0가 아니다.

def pmean_test(sample, u0, p_var, alpha=0.05):
    s_mean = np.mean(sample)
    n = len(sample)
    rv = stats.norm()
    interval= rv.interval(1-alpha)

    z= (s_mean-u0)/np.sqrt(p_var/n)
    if interval[0] <= z <= interval[1]:
        print("귀무가설 채택")
    else:
        print("귀무가설 기각")

    if z<0:
        p=rv.cdf(z)*2
    else:
        p=(1-rv.cdf(z))*2
    print(f'p값은 {p:.3f}')

sample = np.array(df['무게'])
pmean_test(sample, 130, 9)


#(2) 정규분포의 모평균에 대한 검정:모분산을 모르는 경우
#1표본 1검정 : 모분산을 알지 못하는 상황에서 정규분포의 모평균에 대한 검정
#t검정 통계량 사용
#귀무가설 : 모평균 = u0
#대립가설 : 모평균 !=u0
def pmean_test(sample, u0, alpha=0.05):
    s_mean = np.mean(sample)#표본 평균
    u_var = np.var(sample, ddof = 1)#표본 불편분산
    n = len(sample)
    rv = stats.t(df=n-1)
    interval= rv.interval(1-alpha)

    t= (s_mean-u0)/np.sqrt(u_var/n)
    if interval[0] <= t <= interval[1]:
        print("귀무가설 채택")
    else:
        print("귀무가설 기각")

    if t<0:
        p=rv.cdf(t)*2
    else:
        p=(1-rv.cdf(t))*2
    print(f'p값은 {p:.3f}')

pmean_test(sample, 130)

#1표본 t검정 scipy모듈에서 함수로 제공
t,p = stats.ttest_1samp(sample, 130)
t,p

#(3) 정규분포의 모분산에 대한 검정
#귀무가설 : 모분산 = var0
#대립가설 : 모분산! = var0

#Y=(n-1)s^2/var0 을 검정 통계량으로 사용하여 Y~chi2(n-1)이되는것을 이용
def pvar_test(sample, var0, alpha=0.05):
    u_var = np.var(sample, ddof = 1)#표본 불편분산
    n = len(sample)
    rv = stats.chi2(df=n-1)
    interval= rv.interval(1-alpha)

    y= (n-1)*u_var/var0
    if interval[0] <= y <= interval[1]:
        print("귀무가설 채택")
    else:
        print("귀무가설 기각")

    if y<0:
        p=rv.cdf(y)*2
    else:
        p=(1-rv.cdf(y))*2
    print(f'p값은 {p:.3f}')

pvar_test(sample, 9)##귀무가설 채택 p값은 0.085


#-----------------------------------------------------------------------------------------------------------------

#3. 2표본(두집단) 문제에 관한 가설 검정
#2표본 각각의 대푯값 사이에 차이가 있는지 살펴보고, 대푯값 차이에 대한 검정

#정규분포를 가정할수 있는 경우
#대응표본 - 대응비교 t 검정
#독립표본 - 독립비교 t 검정

#정규분포를 가정할수 없는 경우
#대응표본 - 윌콕슨의 부호순위 검정
#독립표본 - 만'위트니의 U검정


#대응표본 : 두 데이터에서 서로 대응하는 동일한 개체에 대해 각각 다른 조건으로 측정
#ex) 동일한 피검자에게 약을 투여하기 전 후에 측정한 혈압
#어떤 시약이 혈압을 상승시키는 효과가 있는지 확인하려면 대응표본인 대푯값의 차이에대한 검정 수행

#독립표본 : 두 데이터에서 객체가 다른 데이터로 되어있는 독립표본
#EX) A조 학생의 시험 점수와 B조 학생의 시험 점수
#두 학습의 평균 점수에서 차이가 있는지 확인하려면 독립표본인 대푯값의 차이에 대한 검정 수행

#독립성 검정 : 독립성 검정 web 마케팅에서 A/B 테스트로 자주 사용
#EX) 광고 A와 B의 상품 구입비율 변화 여부

#(1) 대응비교 t검정
#대응하는 데이터가 있고, 데이터 차이에 정규분포를 가정할수 있는경우
#평균값 차이에 대한 검정

#귀무가설 : u_diff(두집단의 평균 차이)=0
#대립가설 : u_diff(두집단의 평균 차이)!=0

#ex)A학생 근력운동 전후 집중력 향상이 있는지 검정
training_rel = pd.read_csv('./data/ch11_training_rel.csv')
training_rel.shape
training_rel.info()
training_rel.head()

training_rel['차이']=training_rel['후']-training_rel['전']
training_rel.head()

#귀무가설 : u_diff=0
#대립가설 : u_diff!=0

#차이가 각각 독립이고, 동일한 정규분포를 따르고 있다고 가정할수 있으면
#이 검정이 모분산을 모르는 경우의 정규분포의 모평균에 대한 검정 즉 1표본 t검정으로 귀결됨.

t,p = stats.ttest_1samp(training_rel['차이'],0)
p #0.04004419061842953
#귀무가설 기각 - 결론 근력운동이 집중력 향상에 영향을 주는듯 보임.
t,p = stats.ttest_rel(training_rel['전'],training_rel['후'])
p#0.04004419061842953
#귀무가설 기각 - 결론 근력운동이 집중력 향상에 영향을 주는듯 보임.


#(2)독립 비교 t검정
#대응하는 데이터가 없고 독립된 2표본 모집단에 정규분포를 가정할 수 있는 경우
#평균값 차이에 대한 검정

#ex) 두학급간의 집중력에유의한 차이가 있는지 검정
training_ind = pd.read_csv('./data/ch11_training_ind.csv')
training_ind.info()
training_ind.head()

#A학급의 집중력 평균 u1, b학급 집중력 평균 u2
#귀무가설 : u1-u2 =0
#대립가설 : u1-u2 !=0

#두학급은 대응이 없는 데이터 독립표본이므로 다른 모집단임
#A학급의 학생점수는 N(u1, var1)을 따르고
#B학급의 학생점수는 N(u2, var2)을 따른다

#t=(Xbar-Ybar)-(u1-u2)/sqrt(u_v1/n1 + u_v2/n2)
#t분포의 자유도는 복잡한 수식으로 계산됨(웰치의 방법)

t,p = stats.ttest_ind(training_ind['A'], training_ind['B'], equal_var=False)
p#0.08695731107259362
#귀무가설 채택 - 결론 A학급과 B학급 사이에 평균점에 유의한 차이가 없다.

#(3) 윌콕슨의 부호순위 검정
#대응 표본에서 차이에 정규분포를 가정할수 없는 경우
#중앙값 차이에 대한 검정

training_rel
toy_df = training_rel[:6].copy()
toy_df
diff = toy_df['차이']
#값이 작은순서대로 순위부여 (큰수일수록 높은 값)
rank = stats.rankdata(abs(diff)).astype(int)
toy_df['순위']=rank
toy_df

#차이의 부호가 -인것과 +인것의 각 순위 합계
r_minus = np.sum((diff<0)*rank)
r_plus = np.sum((diff>0)*rank)
r_minus,r_plus

#r_minus,r_plus 중에서 작은 쪽이 검정 통계량이 됨
#검정통계량 8
#검정통계량이 임계값보다 작은 경우 귀무가설이 기각되는 단측검정 수행

# 검정통계량값이 클수록 두집단간의 차이가 없다
#검정통계량값이 작을수록 두집단간의 차이가 있다.

T,p = stats.wilcoxon(training_rel['전'],training_rel['후'])
p#0.03623390197753906
#귀무가설 기각. 대응비고 t검정과 결과 값이 같다.
#윌콕슨 부호순위검정은 모집단이 정규분포를 따르는 경우에도 검정에 사용할수 있따.
#단, t검정보다 검정력이 낮다.


#(4) 만'위트니의 U검정
#대응되는 데이터가 없는 2표본 모집단에 정규분포를 가정할수 없는 경우
#중앙값차이에 대한 검정
#윌콕슨의 순위합검정이라고도 부름

toy_df = training_ind[:5].copy()
toy_df
#U검정에서 데이터 전체에 대해서 값이 작은 순서대로 순위 부여
rank = stats.rankdata(np.concatenate([toy_df['A'],toy_df['B']]))
rank

rank_df = pd.DataFrame({'A': rank[:5],'B':rank[5:]}).astype(int)
rank_df

#검정통계량 값으로 A순위의 합을 사용
#A에 낮은 순위가 모여있으면A순위합은 작아짐
#A에 높은 순위가 모여있으면 A순위합은 커짐
#A순위 합은2표본 사이의 데이터 편향을 잘 반영

#검정통계량 값 A순위합 - n1*(n1+1)/2(n1은 A의 크기)
#빼는 이유는 검정통계량 값을 0으로 만들기 위함
#A에 높은 순위만 모여있는 경우 순위 합의 값은  n1*(n1+1)/2

n1 = len(rank_df['A'])
u = rank_df['A'].sum() - (n1*(n1+1))/2
u#7.0

u,p = stats.mannwhitneyu(training_ind['A'],training_ind['B'])
p#0.02974305583063662
#귀무가설 기각

##문제풀이##

# u0 = 50
# u1 != 50
# n(50,20**2/100)
#검정통계량
z=(41-50)/np.sqrt(20**2/100)
#임계값 
rv= stats.norm()
rv.isf(0.99)
#검정통계량 임계값 비교
z, rv.isf(0.99) #검정통계량 < 임계값 (귀무가설 기각)


#표본평균분포 N(75,10**2/30)
z=(79-75)/np.sqrt(10**2/30)
z, rv.isf(0.1)#귀무가설 기각.

##검정통계량 = (표본평균 - 모평균)/np.sqrt(모표준편차**2/샘플수) 
##임계값 rv.isf(유의수준)##단측일 경우 알아서 잘 판단 하든가
##임계값 (1-rv.isf(유의수준) or rv.isf(유의수준))*2
##임계값과 검정통계량으로 잘 판단해서 결론낼것


##모집단의 모분사능ㄹ 모를때 평균에 관한 검증
#t분포
#t = 표본평균-평균/np.sqrt(s^2/n)) s는 표본평균표준편차


t= (6-5)/np.sqrt(3**2/10)
rv=stats.t(9)
interval=rv.interval(0.95)
a=rv.isf(0.975)
a
b=rv.isf(0.025)
t,interval

##모분산에 대한 검정

#카이제곱 검정통계량
#Y=(n-1)불편분산 / 모분산

n0=3

Y= 10*1.3/3
rv=stats.chi2(10)
p=rv.isf(0.99)
Y,p

## 귀무가설 채택

















